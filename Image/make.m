
build_folder = fileparts(mfilename('fullpath')); 

src_path = strcat(build_folder, "\Image.cpp");
matlab_include = strcat(matlabroot, '\extern\include');
% msvc_include = "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include";
out_path = strcat(build_folder, "\Image.lib");

% system("C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Auxiliary\Build\vcvars64.bat");

% system(strcat(...
%     """C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\bin\Hostx64\x64\cl.exe"" /std:c++17 /EHsc /LD /I """...
%     ,matlab_include...
%     ...,""" /I """, msvc_include...
%     ,""" /I """,build_folder...
%     ,""" """, src_path...
%     ,""" /Fo """,out_path...
%     ,""""...
%     ));
% 
% mbuild(...
%     "-c"...
%     ,src_path...
%     ,strcat("-I",build_folder)...
%     ,"-O"...
%     ,"-outdir",build_folder...
%     ,"-n"...
%     );

system('"C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\bin\Hostx64\x64\cl.exe" /LD -MD -Zc:__cplusplus -Zp8 -GR -W3 -EHsc- -nologo -O2 -DNDEBUG /DMATLAB_DEFAULT_RELEASE=R2017b  /DUSE_MEX_CMD   /DMSVC /DIBMPC /D_CRT_SECURE_NO_DEPRECATE -I"E:\code\functionalimaginganalysis\Image"  -I"C:\Program Files\MATLAB\R2022a\extern\include" -I"C:\Program Files\MATLAB\R2022a\extern\include\win64" "E:\code\functionalimaginganalysis\Image\Image.cpp" /FoE:\code\functionalimaginganalysis\Image\ /UMX_COMPAT_SC');

    

clibgen.generateLibraryDefinition(strcat(build_folder,"\Image.hpp"),'Libraries', strcat(build_folder, "\Image.dll"),'returncarrays',false,'OverwriteExistingDefinitionFiles',true);
 
 
% %% C++ class method |get| for C++ class |Image<short>| 
% % C++ Signature: int16_t const * Image<short>::get()
% getDefinition = addMethod(Image_short_Definition, ...
%    "int16_t const * Image<short>::get()", ...
%    "MATLABName", "get", ...
%    "Description", "get Method of C++ class Image<short>."); % Modify help description values as needed.
% defineOutput(getDefinition, "RetVal", "int16", ["nx","ny","nRepeats","nz","nFrames"]); % <MLTYPE> can be "int16", or "clib.array.Image.Short"
% validate(getDefinition);
% 
% %% C++ class constructor for C++ class |SImage| 
% % C++ Signature: SImage::SImage(char const * filename)
% SImageConstructor1Definition = addConstructor(SImageDefinition, ...
%    "SImage::SImage(char const * filename)", ...
%    "Description", "clib.Image.SImage Constructor of C++ class SImage."); % Modify help description values as needed.
% defineArgument(SImageConstructor1Definition, "filename", "string", "input", "nullTerminated"); % <MLTYPE> can be "clib.array.Image.Char","int8","string", or "char"
% validate(SImageConstructor1Definition);
